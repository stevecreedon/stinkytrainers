# Secure the dashboard

To secure the dashboard we're going to need a user so that we are able to sign-up, store some password details, sign-out and then sign-in.

## 1. Add the Devise gem
Devise gives us authentication out-of-the-box. We'll be getting devise to build us an authenticating user class
and the views to allow users to sign up, sign-in and handle forgotten passwords.

### 1.1 add the devise gem to bundlers Gemfile

~~~ruby
gem 'devise'
~~~
	
### 1.2 Install the devise gem

~~~console
bundle install
~~~
	
### 1.3 Add devise to our application
Most gems are libraries of code that our application will use as it's running. Some, like Devise, need to bind themselves to Rails as they load so that they can enhance or change existing functionality. Rails does this with initializers and we need to install Devise so that it will install it's initializer in the appropriate place in our Rails App.
 
Run the installer

~~~console
rails generate devise:install
~~~

Don't worry if Devise prints all this stuff below to console, it's just giving you some helpful advise about what to do next.

~~~console 
Some setup you must do manually if you haven't yet:
 
   1. Ensure you have defined default url options in your environments files. Here 
      is an example of default_url_options appropriate for a development environment 
      in config/environments/development.rb:
 
        config.action_mailer.default_url_options = { :host => 'localhost:3000' }
 
      In production, :host should be set to the actual host of your application.
 
   2. Ensure you have defined root_url to *something* in your config/routes.rb.
      For example:
 
        root :to => "home#index"
 
   3. Ensure you have flash messages in app/views/layouts/application.html.erb.
      For example:
 
        <p class="notice"><%= notice %></p>
        <p class="alert"><%= alert %></p>
 
   4. If you are deploying Rails 3.1 on Heroku, you may want to set:
 
        config.assets.initialize_on_precompile = false
 
      On config/application.rb forcing your application to not access the DB
      or load models when precompiling your assets.
 
 ===============================================================================
~~~

1.4 look at the files devise has created and read the notes. We'll address them one by one below:

~~~console
       create  config/initializers/devise.rb
       create  config/locales/devise.en.yml
~~~


### Devise point 1. 
Setup action mailer so that devise can email us any forgotten passwords. To do this we need to tell Devise where the link in the email it will send should point to. Rails allows us to configure environments for __development__, __test__ and __production__ but for now we'll just set up the default actionmailer url for our development environment.

In the file config/environments/development.rb add the line below anywhere after __Stinkytrainers::Application.configure do__

~~~ruby
config.action_mailer.default_url_options = { :host => 'localhost:3000' }
~~~


### Devise point 2.
We've already done that in section 2.

### Devise point 3.
Rails has a convenience system called 'Flash'. It has nothing to do with adobe Flash. Flash is a global variable that you can use at any point in your controller and assign a message to __notice__ or an __alert__ by writing something like:

~~~ruby
flash[:notice] = "I'm afraid you've failed Mr Bond"
~~~

This message will then be usd in your view as below. 

Add these line to app/views/layouts/application.html.erb before the line 'yield'

~~~ruby       
   <p class="notice"><%= notice %></p>
   <p class="alert"><%= alert %></p>
~~~

It has to be said that Flash is very useful for quick applications like ours but less commonly used in bigger apps where this kind of user interaction is determined by the Look & Feel.

## 2. Create the user model using devise generator 

### 2.1 Create a User model using the Devise generator. This will give us a Rails model with extra authentication methods and attributes needed for Devise,

~~~console
rails generate devise user
~~~
	
### 2.2 Take a look at what it's created:

~~~console
    invoke  active_record
      create    db/migrate/20120629090415_devise_create_users.rb
      create    app/models/user.rb
      invoke    rspec
      create      spec/models/user_spec.rb
      insert    app/models/user.rb
      route  devise_for :users
~~~
   
The line `create    db/migrate/20120629090415_devise_create_users.rb` gives us our first database migration db/migrate{timestamp}_devise_create_users.rb, a user model `app/models/user.rb` and a file for writing tests for our user `spec/app/models/user.rb`.

### 2.3 Our first migration

Take a look at the migration, it will be the only file in db/migrate and you'll see quite a bit of ruby code for creating the users table that will hold the data for the user model Devise has generated. __Note__ that the table name is plural users for a singular model user. Rails is very good at connecting singular and plural words. For example, it will understand that the collection lesson.students will contain student objects. If you're thinking this is all a bit too constraining, all this is configurable but out of the box we get the functionality we're probably going to need.

Lets run the migration to create the table in our database:

~~~console
bundle exec rake db:migrate
~~~
  
You should see some sql statements appear in the console as the migration creates the users table:

~~~console
==  DeviseCreateUsers: migrating ==============================================
-- create_table(:users)
   -> 0.2032s
-- add_index(:users, :email, {:unique=>true})
   -> 0.0037s
-- add_index(:users, :reset_password_token, {:unique=>true})
   -> 0.0022s
==  DeviseCreateUsers: migrated (0.2106s) =====================================
~~~

## 3. Now let's secure the home page with Devise:
add this line to the dashboard controller app/controllers/dashboard_controller.rb

~~~ruby
before_filter :authenticate_user!
~~~

We've added a __before filter__ that calls the method Devise has created for us __authenticate_user!__. This method will run before each action in the dashboard controller to ensure we have an authenticated user in the application session.
	
Now start the app `bundle exec rails s` browse to the home page __localhost:3000__ and click the dashboard link. You should be redirected to a screen asking you to login or sign up. Just sign up as a new user and you should then be directed to the dashboard page. 

## 4. Add some code so that we can sign out
Add this line to app/layouts/application.html.erb so that it's at the bottom of the &lst;div class="navbar navbar-fixed-top"&gt;. Forgive the inline style but this isn't a tutorial on css.

&lt;% if user_signed_in? %&gt;
   <div  style="text-align: right;">
	&lt;%= link_to "sign-out", destroy_user_session_path, :method => :delete  %&gt;
   </div>
&lt;% end %&gt;          

user_signed_in? is a helper method generated by devise, link_to is a Rails helper for generating html links. In this case we're generating a link with text 'sign-out' and a url generated by the devise route 
destroy_user_session_path. We'll cover routes a bit more in the next section.


## 5. Testing our locked-down dashboard
Now that we've locked down our dashboard controller so that only authenticated users can access it, we've probably broken any tests that use that controller. Try it:

~~~console
bundle exec rake spec
~~~

### 5.1 Devise helpers 
Fortunately Devise comes to the rescue again and has provided us with some helpers that lets us simulate users being logged in and out.

create the file spec/support/devise.rb (you'll probably have to create the spec/support folder) and add these lines:

~~~ruby
RSpec.configure do |config|
 Â config.include Devise::TestHelpers, :type => :controller
end
~~~

### 5.2 Test the redirect
Let's test that our dashboard controller redirects us to a sign in page when there is no signed-in user

In spec/controllers/dashboard_controller_spec.rb

~~~ruby
it "should redirect to the login page when the user is not signed-in" do
  get 'index'
  response.should redirect_to('/users/sign_in')
end
~~~

and run the test

~~~ ruby
bundle exec rake spec
~~~

You should see the test pass in console 

### 5.3 Test signed-in users

add this test to spec/controllers/dashboard_controller_spec.rb beneath our passing test.

~~~ruby
it "should render the index page when the user is signed-in" do
 get 'index'
 response.should be_success
end
~~~

and run the test

~~~console
bundle exec rake spec
~~~

you should see that the test fails: 

 1) DashboardController GET 'index' should render the index page when the user is signed-in
   Failure/Error: response.should be_success
   expected success? to return true, got false
    ./spec/controllers/dashboard_controller_spec.rb:13:in `block (3 levels) in <top (required)>'

That's because we haven't yet signed-in a user so we're being redirected away. Let's fix this by adding the `sign_in :user, User.create(:email => 'foo@domain.com', :password => 'simple')` line to our test:

~~~ruby
it "should render the index page when the user is signed-in" do
   sign_in :user, User.create(:email => 'foo@domain.com', :password => 'simple')
   get 'index'
   response.should be_success
end
~~~

The test should now pass when you run `bundle exec rake spec`

## 6. Change the test to use FactoryGirl.
We've got the test passing but it's not good practice to create a new user each time we want to run a test so we're going to use a gem called FactoryGirl that will create users for us on demand that we can use in our tests. As our user (and other objects) get more complex, FactoryGirl will become a very clear and convenient way to build objects for test rather than from scratch each time.

### 6.1 Install the FactoryGirl gem
add these lines to Gemfile's testing group:

~~~ruby
group :development, :test do
  gem 'rspec-rails'
  gem 'capybara'
  gem 'factory_girl_rails'
end
~~~

then install the gem

~~~console
bundle install
~~~

The first thing we need to do is create a factory file for our first User factory. Create spec/factories.rb then add these lines to the file:

~~~ruby
FactoryGirl.define do
  sequence :email do |n|
   "person#{n}@domain.com"
  end

  factory :user do
    email { generate(:email) } 
    password 'password'
  end
end
~~~

This factory will create a sequence of users on demand, each with unique emails "person1@domain.com", "person2@domain.com" etc..

Now let's use FactoryGirl in our test:

In `spec/controllers/dashboard_controller_spec.rb` replace the line:

~~~ruby
sign_in :user, User.create(:email => 'foo@domain.com', :password => 'simple')
~~~

with

~~~ruby
sign_in :user, FactoryGirl.create(:user)
~~~

now check that it's all still working

~~~console
bundle exec rake spec  
~~~  
  
So we've created tests for controllers and views. Now we're going to use the capybara to create integration tests to see if it all ties together properly:

# [IS IT BEST TO INSTALL THE CAPYBARA GEM HERE ?? (NEEDED FOR EARLIER VIEW TEST ??)]
  
# Create the folder and file spec/integration/dashbaord/authentication_spec.rb and add these lines:

require 'spec_helper'

describe 'only registred users can access dashboard' do

 Â it 'should require users to sign in when they trying to access dashboard' do
 Â  Â user = FactoryGirl.create(:user)

 Â  Â visit dashboard_index_url

 Â  Â page.current_path.should == new_user_session_path

    # 'Email' and 'Password' are the text in the HTML labels on the sign in screen
 Â  Â fill_in('Email', :with => user.email)
 Â  Â fill_in('Password', :with => user.password)

 Â  Â click_button('Sign in')

 Â  Â page.current_path.should == dashboard_index_path
 Â end
 
end

# run the spec

bundle exec rake spec




 

	

