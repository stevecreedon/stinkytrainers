# 2. Create the home page
The home page is the entry point to our application. Everybody should be able to access this page whether they're logged on or not making this the best place to start.

<a id='top'></a>

1. [Rest, Controllers and Views in Rails](#rest-controllers-and-views-in-rails)
1. [Create the home page controller](#create-the-home-page-controller)
1. [Create the home page](#create-the-home-page)
1. [Time to write a test. ](#time-to-write-a-test)

<br/>
<br/>
<br/>
<br/>
<a id='rest-controllers-and-views-in-rails'></a>
<a href='#top'>back to top</a>
## 2.1. Rest, Controllers and Views in Rails
Rails is an __MVC__ model-view-controller framework so we need a home controller __C__ that will handle the request http://www.stinkytrainers.com and route this request through to our home page, commonly known as a 'view' __V__ in Rails language. If you're new to MVC you're probably asking where the model __M__ is in MVC ? Well since this is our home page that doesn't do much we don't need a business model to do any fancy calculation for us.

### 2.1.1. Rest
The controllers in our application will all be Restful resources. The Rails website has [a fuller discussion of Rails and Rest](http://guides.rubyonrails.org/routing.html#resource-routing-the-rails-default) but in a nutshell we'll be building controllers for entity:

* home
* user
* games
* results
* friends

### 2.1.2. Controllers 
Because we're using Rest, each of our controllers will have very similar sets of actions (also known as methods) giving us a level of consistency that will make it easy for us to find our way around the application as it grows.

1. __def index__ will list all of the objects that controller is responsible for e.g. __games_controller index___ will list all of the games.
1. __def new__ will display an empty form for creating a new object e.g. __games_controller new__ will route through to an empty form for a new game.
1. __def show__ will display an existing object.
1. __def create__ will create a new object submitted by the form in __def new__
1. __def edit__ will display a form populated by an existing object
1. __def update__ will update an existing object with details submitted by the form in __def edit__
1. __def destroy__ will destroy an existing object

### 2.1.3. Rest: URLs > Controllers > Views  
The Rest convention allows Rails to automatically hook web requests to actions whuich then call controllers:

1. __GET /games__ calls __games_controller#index__ method which displays the __games/index.html.erb__ view.
1. __GET /games/new__ calls __games_controller#new__ method which displays the __games/new.html.erb___ view.
1. __POST /games__ calls the __games_controller#create__ method which will either:
    * If something is wrong with the data and the game can't be created then display the __games/new.html.erb__.
    * If the data is correct and the game is created then redirect to a list of all the games (the __games#index__ action).
1. __GET /games/123__ calls the __games_controller#show__ action which displays the game with id 123 in __games/show.html.erb__.
1. __GET /games/edit__ calls the __games_controller#edit__ action which displays a form populated with the game with id 123 in the view __games/edit.html.erb__.
1. __PUT__ calls the __games_controller#update__ action which will either:
    * If something is wrong with the data and the game can't be created then display the __games/edit.html.erb__.
    * If the data is correct and the game is updated then redirect to a list of all the games (the __games#index__ action).
1. __DELETE /games/123__ will call the __games_controller#destroy___ action which will then redirect to a list of all the games (the __games#index__ action).  

__GET__, __POST__, __PUT__ and __DELETE__ are all standard HTTP Verbs. You can find out more about HTTP verbs here. Those of you familiar with HTTP verbs will probably be aware that web browsers generally don't use __PUT__ and __DELETE__. Rails appends parameters to the request update and destroy requests that will be interpreted by Rails server as __PUT__ and __DELETE__.

<br/>
<br/>
<br/>
<br/>
<a id='create-the-home-page-controller'></a>
<a href='#top'>back to top</a>
## 2.2. Create the home page controller
OK so that's enough theory for now. Let's write some code. Ww'll create our first controller using one of the Rails generators:

~~~console
  bundle exec rails g controller home index
~~~  

__What just happened ?__

The rails generator created a controller __app/controllers/home_controller.rb___. It gave the controller an action called __index__ and created a view that will match the index action __app/views/home/index.html.erb__. Rails also created a helper file for our view (we'll come to that later) and some files under our spec folder for testing the controller and views. We won't be testing the home page as it's not really doing anything.

~~~console
   create app/controllers/home_controller.rb
    route get "home/index"
      invoke erb
     create  app/views/home
     create  app/views/home/index.html.erb
     invoke rspec
     create  spec/controllers/home_controller_spec.rb
     create  spec/views/home
     create  spec/views/home/index.html.erb_spec.rb
     invoke helper
     create  app/helpers/home_helper.rb
     invoke  rspec
     create   spec/helpers/home_helper_spec.rb
     invoke assets
     invoke  coffee
     create   app/assets/javascripts/home.js.coffee
    invoke  scss
    create   app/assets/stylesheets/home.css.scss
~~~
  
<br/>
<br/>
<br/>
<br/>
<a id='create-the-home-page'></a>
<a href='#top'>back to top</a>
## 2.3. Create the home page

### 2.3.1. Link the root "/" path to home controller
Rails can't know that we want the home controller to manage the home page for our application so add this line to __config/routes.rb__

~~~ruby 
root :to => 'home#index'
~~~  

and delete the line

~~~ruby
get "home/index"
~~~

which was auto-generated for us.

This tells rails that the root of our application is the __index__ action of the __home__ controller, i.e. __def index__ in __app/controllers/home_controller.rb__. Rails will call this action and then render the view __app/views/home/index.html.erb__ unless we specifically tell it not to (which we won't).

### 2.3.2. Put something on the home page to look at:
Add this line to the home page app/views/home/index.html.erb:

~~~ruby
  <h1>Welcome to Stinky Trainers</h1>
~~~
  
We have a controller a method and a view so now we're ready to start our application.

~~~console
bundle exec rails s
~~~ 

Browse to __localhost:3000__. There's a problem. You can probably see the same page "welcome to rails" page we saw at the end of the previous section. Clearly this isn't the __Welcome to Stinky Trainers__ we expected on thehome page so what's happened ? 

When a page or file is requested Rails always checks the public directory first to see if there is a real file there before it runs any code (it's always much quicker and easier to return a real file than to build one in code). If you look in the __/public__ folder you'll see an __index.html__ file. Rails is finding this page and just returning it instead calling of our __home_controller#index__ then __index.hrml.erb__. It's an easy fix; just delete public/index.html.erb, refresh the page in your browser and you should see some __stinky trainers__.

![Our first home page](/assets/3.2_first_home_page.png)

<br/>
<br/>
<br/>
<br/>
<a id='time-to-write-a-test'></a>
<a href='#top'>back to top</a>
## 2.4. Time to write a test. 
One of the strengths of Ruby and Rails is the ease with which we can write expressive testing code. Ruby is scripted, not compiled, so we don't have an IDE or compiler to sanity check our code for us. That means we need to write lots of tests. If you're not used to Test Driven Development, it's one of those things that seems really alien at first but then you quickly begin to wonder how you ever managed without it.

Our dashboard page doesn't do very much at this stage so let's start with just a very basic test:

### 2.4.1. Inside the describe block in spec/views/home/index.html.erb_spec.rb

~~~ruby
it 'should display Welcome to Stinky Trainers on the home page' do
    render
    rendered.should have_content("Welcome to Stinky Trainers")
end
~~~


### 2.4.2. Run the test

~~~console
bundle exec rspec
~~~

You should see something like:

~~~console
*.*

Pending:
  DashboardHelper add some examples to (or delete) /Users/stephencreedon/devel/stinkytrainers/spec/helpers/dashboard_helper_spec.rb
    # No reason given
    # ./spec/helpers/dashboard_helper_spec.rb:14
  dashboard/index.html.erb add some examples to (or delete) /Users/stephencreedon/devel/stinkytrainers/spec/views/dashboard/index.html.erb_spec.rb
    # No reason given
    # ./spec/views/dashboard/index.html.erb_spec.rb:4

Finished in 0.12117 seconds
4 examples, 0 failures, 2 pending
~~~

Pending tests are empty tests that the generators have created for us but we haven't coded yet. The important thing is there are no failures. Take a look at the first and the last lines last lines:

~~~console
*.*

---

4 examples, 0 failures, 2 pending
~~~

The *.* is a Pending test, a passed test and a pending test.

Let's experiment a little and confirm the test is working by breaking it. Change have_content test in __spec/views/home/index.html.erb_spec.rb__ to have_content("Welcome to Smelly Socks")

~~~console
bundle exec rspec
~~~

If you read the results in console you should see that test has failed with out put something like:

~~~console
**F

Pending:
  dashboard/index.html.erb add some examples to (or delete) /Users/stephencreedon/devel/stinkytrainers/spec/views/dashboard/index.html.erb_spec.rb
    # No reason given
    # ./spec/views/dashboard/index.html.erb_spec.rb:4
  DashboardHelper add some examples to (or delete) /Users/stephencreedon/devel/stinkytrainers/spec/helpers/dashboard_helper_spec.rb
    # No reason given
    # ./spec/helpers/dashboard_helper_spec.rb:14

Failures:

  1) home/index.html.erb shows display welcome to stinky trainers on the home page
     Failure/Error: rendered.should have_content("Welcome to Smelly Socks")
       expected there to be content "Welcome to Smelly Socks" in "Welcome to Stinky Trainers"
     # ./spec/views/home/index.html.erb_spec.rb:7:in `block (2 levels) in <top (required)>'

Finished in 0.13094 seconds
4 examples, 1 failure, 2 pending

Failed examples:

rspec ./spec/views/home/index.html.erb_spec.rb:5 # home/index.html.erb shows display welcome to stinky trainers on the home page
~~~

Note the **F in the first line (it may be a different). We now have two pending tests and a failing test.

__DON"T FORGET TO GO BACK AND FIX THE TEST WE"VE JUST BROKEN__
