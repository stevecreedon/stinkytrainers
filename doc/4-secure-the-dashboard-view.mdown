# Secure the dashboard

To secure the dashboard we're going to need a user so that we are able to sign-up, store some password details, sign-out and then sign-in.

INDEX

## Add the Devise gem
Devise gives us authentication out-of-the-box. We'll be getting devise to build us an authenticating user class
and the views to allow users to sign up, sign-in and handle forgotten passwords.

### Add the devise gem to bundlers Gemfile
Add the line `gem 'devise'` to our Gemfile

~~~ruby
source 'https://rubygems.org'

gem 'rails', '3.2.8'
gem 'pg'

 # Bundle edge Rails instead:
 # gem 'rails', :git => 'git://github.com/rails/rails.git'


group :development do
  gem 'sqlite3'
  gem 'redcarpet'
  gem 'pygmentize'
  gem 'nokogiri'
end



 # Gems used only for assets and not required
 # in production environments by default.
group :assets do
  gem 'sass-rails',   '~> 3.2.3'
  gem 'coffee-rails', '~> 3.2.1'
  
  # See https://github.com/sstephenson/execjs#readme for more supported runtimes
  # gem 'therubyracer', :platforms => :ruby

  gem 'uglifier', '>= 1.0.3'
end

gem "twitter-bootstrap-rails",'~> 2.0.7'
gem 'jquery-rails', '~> 2.0.2'
gem 'devise', '~> 2.1.2'

group :development, :test do
  gem 'rspec-rails', '=2.11.0'
  gem 'capybara', '=1.1.2'
  gem 'launchy'
  gem 'factory_girl_rails'
end

 # To use ActiveModel has_secure_password
 # gem 'bcrypt-ruby', '~> 3.0.0'

 # To use Jbuilder templates for JSON
 # gem 'jbuilder'

 # Use unicorn as the app server
 # gem 'unicorn'

 # Deploy with Capistrano
 # gem 'capistrano'

 # To use debugger
 # gem 'debugger'
~~~
	
### Install the devise gem

~~~console
bundle install
~~~
	
### Add devise to our application
Most gems are libraries of code that our application will use as it's running. Some, like Devise, need to bind themselves to Rails as they load so that they can enhance or change existing functionality. Rails does this with initializers and we need to install Devise so that it will install it's initializer in the appropriate place in our Rails App.
 
Run the installer

~~~console
rails generate devise:install
~~~

Don't worry if Devise prints all this stuff below to console, it's just giving you some helpful advise about what to do next.

~~~console 
Some setup you must do manually if you haven't yet:
 
   1. Ensure you have defined default url options in your environments files. Here 
      is an example of default_url_options appropriate for a development environment 
      in config/environments/development.rb:
 
        config.action_mailer.default_url_options = { :host => 'localhost:3000' }
 
      In production, :host should be set to the actual host of your application.
 
   2. Ensure you have defined root_url to *something* in your config/routes.rb.
      For example:
 
        root :to => "home#index"
 
   3. Ensure you have flash messages in app/views/layouts/application.html.erb.
      For example:
 
        <p class="notice"><%= notice %></p>
        <p class="alert"><%= alert %></p>
 
   4. If you are deploying Rails 3.1 on Heroku, you may want to set:
 
        config.assets.initialize_on_precompile = false
 
      On config/application.rb forcing your application to not access the DB
      or load models when precompiling your assets.
 
 ===============================================================================
~~~

1.4 look at the files devise has created and read the notes. We'll address them one by one below:

~~~console
       create  config/initializers/devise.rb
       create  config/locales/devise.en.yml
~~~


### Devise point 1. 
Setup action mailer so that devise can email us any forgotten passwords. To do this we need to tell Devise where the link in the email it will send should point to. Rails allows us to configure environments for __development__, __test__ and __production__ but for now we'll just set up the default actionmailer url for our development environment.

In the file config/environments/development.rb add the line `config.action_mailer.default_url_options = { :host => 'localhost:3000' }`

~~~ruby
Stinkytrainers::Application.configure do
  # Settings specified here will take precedence over those in config/application.rb

  config.action_mailer.default_url_options = { :host => 'localhost:3000' }

  # In the development environment your application's code is reloaded on
  # every request. This slows down response time but is perfect for development
  # since you don't have to restart the web server when you make code changes.
  config.cache_classes = false

  # Log error messages when you accidentally call methods on nil.
  config.whiny_nils = true

  # Show full error reports and disable caching
  config.consider_all_requests_local       = true
  config.action_controller.perform_caching = false

  # Don't care if the mailer can't send
  config.action_mailer.raise_delivery_errors = false

  # Print deprecation notices to the Rails logger
  config.active_support.deprecation = :log

  # Only use best-standards-support built into browsers
  config.action_dispatch.best_standards_support = :builtin

  # Raise exception on mass assignment protection for Active Record models
  config.active_record.mass_assignment_sanitizer = :strict

  # Log the query plan for queries taking more than this (works
  # with SQLite, MySQL, and PostgreSQL)
  config.active_record.auto_explain_threshold_in_seconds = 0.5

  # Do not compress assets
  config.assets.compress = false

  # Expands the lines which load the assets
  config.assets.debug = true
end
~~~


### Devise point 2.
This is telling us to create a route to our home page. We've already covered this in section 2.

### Devise point 3.
Rails has a convenience system called 'Flash'. It has nothing to do with adobe Flash. Flash is a global variable that you can use at any point in your controller and assign a message to __notice__ or an __alert__ by writing something like:

~~~ruby
flash[:notice] = "I'm afraid you've failed Mr Bond"
~~~

This message will then be usd in your view as below. 

~~~ruby       
   <p class="notice"><%= notice %></p>
   <p class="alert"><%= alert %></p>
~~~

Add the two lines above to app/views/layouts/application.html.erb below inside the 'container' div above `yield`. `yield` is where Rails will be putting the output of our view. 

~~~ruby
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= content_for?(:title) ? yield(:title) : "StinkyTrainers" %></title>
    <%= csrf_meta_tags %>

    <!-- Le HTML5 shim, for IE6-8 support of HTML elements -->
    <!--[if lt IE 9]>
      <script src="http://html5shim.googlecode.com/svn/trunk/html5.js" type="text/javascript"></script>
    <![endif]-->

    <%= stylesheet_link_tag "application", :media => "all" %>

    <link href="images/favicon.ico" rel="shortcut icon">
    <link href="images/apple-touch-icon.png" rel="apple-touch-icon">
    <link href="images/apple-touch-icon-72x72.png" rel="apple-touch-icon" sizes="72x72">
    <link href="images/apple-touch-icon-114x114.png" rel="apple-touch-icon" sizes="114x114">

    <link href='http://fonts.googleapis.com/css?family=Sonsie+One|Vast+Shadow' rel='stylesheet' type='text/css'>
    <link href='http://fonts.googleapis.com/css?family=Vollkorn' rel='stylesheet' type='text/css'>
 
  </head>
  <body class="stinky">
    <%= render 'shared/google_analytics' %>
    <div class="navbar navbar-fixed-top">
      <div class="navbar-inner">
        <div class="container">
          <a class="btn btn-navbar" data-target=".nav-collapse" data-toggle="collapse">
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
          </a>

          <a class="brand" href="/">Stinkytrainers</a>
          <div class="container nav-collapse">
            <ul class="nav">
               <li><%= link_to "dashboard", dashboard_index_path  %></li>
            </ul>
            
          </div><!--/.nav-collapse -->
        </div>
      </div>
	  
	
    </div>
	
    <h1 class="banner"><%= yield :title %></h1>
	
    <div class="container">
     
      <p class="notice"><%= notice %></p>
	  <p class="alert"><%= alert %></p>

      <div class="content">
        <div class="row">
           <div class="span9">
			
				<%= yield %>
			
            </div>
            <div class="span3">
				&nbsp;
            </div><!--/span-->
        </div><!--/row-->
      </div><!--/content-->

      <footer>
        <p>&copy; Stinky Trainers 2012</p>
      </footer>

    </div> <!-- /container -->

    <!-- Javascripts
    ================================================== -->
    <!-- Placed at the end of the document so the pages load faster -->
    <%= javascript_include_tag "application" %>

  </body>
</html>
~~~

It has to be said that Flash is very useful for quick applications like ours but less commonly used in bigger apps where this kind of user interaction is determined by the Look & Feel.

### Install the Devise views
Out of the box Devise will provide the application with views for signing-up, signing-in and forgot-password. These views are contained inside the gem where we can't change or style them which isn't that helpful. Luckily Devise gives us a generator that will copy it's views into our application's app/views folder where we can make whatever changes we want.

~~~ruby
bundle exec rails generate devise:views
~~~

COMMENTS

## Use Devise to create the User Model

### Create a User model using the Devise generator. 
This will give us a standard Rails ActiveeRcord model but with some extra authentication methods and attributes needed for Devise. Of course we could add these extra bits by hand ourselves but we're here to write an application not a framework so we'll let Devise do this boring stuff for us.

~~~console
rails generate devise user
~~~
	
### Take a look at what it's created:

~~~console
    invoke  active_record
      create    db/migrate/20120629090415_devise_create_users.rb
      create    app/models/user.rb
      invoke    rspec
      create      spec/models/user_spec.rb
      insert    app/models/user.rb
      route  devise_for :users
~~~
   
The line `create    db/migrate/20120629090415_devise_create_users.rb` gives us our first database migration db/migrate/{timestamp}_devise_create_users.rb, a user model `app/models/user.rb` and a file for writing tests for our user `spec/app/models/user.rb`.

### Our first migration
Rails Migrations are a tool for managing the development of SQL Databases. They create tables, rename columns, drop tables, create indexes and pretty much anything else. Migrations are written in Ruby and converted to sql by Rails (or to be more precise the Rails database adapter we're using). 

For example, we could have 4 migrations that 

1. create a table called martians.
1. add an integer column to the table called raygun power.
1. create an index on the raygun column. 
1. rename the raygun column to number_of_arms.

If we were to run

~~~ruby
bundle exec rake db:migrate
~~~

Then, in a timestamped sequence (each migration name has a timestamp embedded in it) the migrations would carry out those tasks.

Running

~~~ruby
bundle exec rake db:rollback
~~~

Would rollback the migrations by one so the number_of_arms column would be named back to raygun. Running 'bundle exec rake db:rollback' again would drop the indexes on the raygun columns etc..

When I ran the devise generator above it created a migration for our user model __db/migrate/20120629090415_devise_create_users.rb__. Note that yours will be named a little different as the timestamp in the migration name will reflect when you created it. 

Take a look at the migration, it will be the only file in the folder __db/migrate__ and you'll see quite a bit of ruby code for creating the users table that will hold the data for the user model Devise has generated. __Note__ that the table name is plural users for a singular model user. Rails is very good at connecting singular and plural words. For example, it will understand that the collection lesson.students will contain student objects. If you're thinking this is all a bit too constraining, all this is configurable but out of the box we get the functionality we're probably going to need.

Lets run the migration to create the table in our database:

~~~console
bundle exec rake db:migrate
~~~
  
You should see some sql statements appear in the console as the migration creates the users table:

~~~console
==  DeviseCreateUsers: migrating ==============================================
-- create_table(:users)
   -> 0.2032s
-- add_index(:users, :email, {:unique=>true})
   -> 0.0037s
-- add_index(:users, :reset_password_token, {:unique=>true})
   -> 0.0022s
==  DeviseCreateUsers: migrated (0.2106s) =====================================
~~~

Also take a look at the file db/schema.rb. This contains an empty schema covering all of our migrations. Schema.rb will be used by Rspec to create an empty test database. It's also useful when your application gets big and running very many migrations from scratch just isn't practicable.

Let's play with migrations a moment and, just for fun, rollback the migration

~~~console
bundle exec rake db:rollback
~~~

and you should see some sql in your console that tells you your table has been dropped from the database. Don't forget to run `bundle exec rake db:migrate` so that we rebuild our dropped users table.

COMMENTS

## Secure the Dashboard with Devise
To secure the dashboard we'll add some code to our dashboard\_controller that checks to see if we have a user in session that's already logged-in. Add the line `before_filter :authenticate_user!` to the dashboard controller app/controllers/dashboard_controller.rb

~~~ruby
class DashboardController < ApplicationController
  
  before_filter :authenticate_user!
  
  def index
  end
end
~~~

We've added a `before filter` that calls a dynamic method that Devise will handle for us `authenticate_user!`. It's dynamic because the method `authenticate_user!` doesn't actually exist which makes sense because the model we're authenticating against doesn't have to be a user. We could easily have created an admin model or even a martian model which would require us to `authenticate_admin!` or `authenticate_martian!`. Ruby, like most programming languages will throw a `NoMethodError` if you try to call a method that doesn't exist but unlike most other languages, before it does, it calls a special method called `method_missing` that allows our code (in this case Devise) to see if it can make sense of something like `authenticate_user!`.  Devise can then decide if it wants to act on this missing method so if our code calls `authenticate_user!` (and we have a user) then Devise will do something. If our code calls `authenticate_martian!` (and we have no martians in this application) then Devise will ignore it and we'll get the expected `NoMethodError`.  

Because it's a `before_filter` then `authenticate_user!` will run before each action in the dashboard controller to ensure we have an authenticated user in the application session.
	
Now start the app `bundle exec rails s` browse to the home page __localhost:3000__ and click the dashboard link. You should be redirected to a screen asking you to login or sign up. Just sign up as a new user and you should then be directed to the dashboard page. 

COMMENTS

### Add some code so that we can sign out
Out of the box Devise gives us views to sign-in, sign-up and even retrieve forgotten passwords but we also need something to sign-out.  

~~~ruby
<% if user_signed_in? %>
   <div  style="text-align: right;">
	<%= link_to "sign-out", destroy_user_session_path, :method => :delete  %>
   </div>
<% end %>          
~~~

Add the lines above to app/layouts/application.html.erb:

~~~ruby
<div class="navbar navbar-fixed-top">
  <div class="navbar-inner">
    <div class="container">
      <a class="btn btn-navbar" data-target=".nav-collapse" data-toggle="collapse">
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </a>

      <a class="brand" href="/">Stinkytrainers</a>
      <div class="container nav-collapse">
        <ul class="nav">
          <% if user_signed_in? %>
		   <div  style="text-align: right;">
			<%= link_to "sign-out", destroy_user_session_path, :method => :delete  %>
		   </div>
		  <% end %>
        </ul>
      </div><!--/.nav-collapse -->
    </div>
  </div>
</div>
~~~

Forgive the inline style but this isn't a tutorial on css.

user\_signed\_in? is a helper method generated by devise, link_to is a Rails helper for generating html links. In this case we're generating a link with text 'sign-out' and a url generated by the devise named route 
destroy\_user\_session_path. We'll cover Devise routes a bit more below.


COMMENTS

## Testing the Dashboard is locked down
Typically with Test Driven Development you would write tests first and then make them pass but in this particular case I wanted you to see Devise in action so that the tests have some meaning. 

Let's test Devise by writing two tests for our dashboard controller:

1. A test that checks we are not allowed to see the dashboard index page and get redirected to the sign-in page if the user hasn't signed-in.
1. A test that checks we are allowed to see the dashboard index page if the user has signed-in.
1. A test that we can sign-up and go to the dashboard index page

Before we start we need to include some helper methods that Devise gives us so that it can participate in our tests. 

Create the file `spec/support/devise.rb` (you'll probably have to create the spec/support folder) and add these lines:

~~~ruby
RSpec.configure do |config|
  config.include Devise::TestHelpers, :type => :controller
end
~~~

### Testing the redirect
Let's test that our dashboard controller redirects us to a sign-in page when there is no signed-in user

In `spec/controllers/dashboard_controller_spec.rb`

~~~ruby
it "should redirect to the login page when the user is not signed-in" do
  get 'index'
  response.should redirect_to(new_user_session_path)
end
~~~

and run the test.

~~~ruby
bundle exec rake spec
~~~

You should see the test passes in console 

NOTE that `new_user_session_path` is another named route. Open `config/routes.rb` and you'll see the line `devise_for :users`

~~~ruby
Stinkytrainers::Application.routes.draw do

 devise_for :users

 resources :dashboard, :only => [:index] 

 root :to => 'home#index'

end
~~~

somewhere near the top. This is devise adding a bunch of new routes for creating and destroying use sessions. You can see them in console by running:

~~~console
bundle exec rake routes
~~~

which should return

~~~console
 new_user_session GET    /users/sign_in(.:format)          devise/sessions#new
            user_session POST   /users/sign_in(.:format)          devise/sessions#create
    destroy_user_session DELETE /users/sign_out(.:format)         devise/sessions#destroy
           user_password POST   /users/password(.:format)         devise/passwords#create
       new_user_password GET    /users/password/new(.:format)     devise/passwords#new
      edit_user_password GET    /users/password/edit(.:format)    devise/passwords#edit
                         PUT    /users/password(.:format)         devise/passwords#update
cancel_user_registration GET    /users/cancel(.:format)           devise/registrations#cancel
       user_registration POST   /users(.:format)                  devise/registrations#create
   new_user_registration GET    /users/sign_up(.:format)          devise/registrations#new
  edit_user_registration GET    /users/edit(.:format)             devise/registrations#edit
                         PUT    /users(.:format)                  devise/registrations#update
                         DELETE /users(.:format)                  devise/registrations#destroy
         dashboard_index GET    /dashboard/index(.:format)        dashboard#index
                         GET    /dashboard(.:format)              dashboard#index
                         GET    /rails-tutorial(/*path)(.:format) tutorial#index
                    root        /                                 home#index
~~~

You can see that __new\_user\_session__ returns the path __/users/sign\_in__ which points to the new method of a devise sessions controller. Remember that we use __new\_user\_session__ by adding either _path or _url to the end depending on whether we want a full url or not.

## Test signed-in users can see the Dashboard
Let's create a test that calls the index page of our secure dashboard_controller. 

add this test to spec/controllers/dashboard\_controller\_spec.rb beneath our passing test.

~~~ruby
it "should render the index page when the user is signed-in" do
 get 'index'
 response.should be_success
end
~~~

Note that we call `get 'index'` in the same way as our first test but this time we expect it to succeed rather than redirect.

Run the test

~~~console
bundle exec rake spec
~~~

you should see that the test fails: 

~~~console
 1) DashboardController GET 'index' should render the index page when the user is signed-in
   Failure/Error: response.should be_success
   expected success? to return true, got false
    ./spec/controllers/dashboard_controller_spec.rb:13:in `block (3 levels) in <top (required)>'
~~~

That's because we haven't yet signed-in a user so we're being redirected away in just the same way as our first test so let's fix our breaking test by adding `sign_in :user, User.create(:email => 'foo@domain.com', :password => 'simple')`

~~~ruby
it "should render the index page when the user is signed-in" do
   sign_in :user, User.create(:email => 'foo@domain.com', :password => 'simple')
   get 'index'
   response.should be_success
end
~~~

The test should now pass when you run `bundle exec rake spec`

### Change the test to use FactoryGirl.
We've got the test passing but it feels wrong to create a new user each time we want to run a test so we're going to use a gem called FactoryGirl. FactoryGirl will, on demand, create test users (and other objects) for us. As our user gets more complex, FactoryGirl will become a clear and convenient way to build objects for testing rather than create new ones from scratch each time.

First let's add the FactoryGirl gem to our Gemfile's testing group:

~~~ruby
group :development, :test do
  gem 'rspec-rails'
  gem 'capybara'
  gem 'factory_girl_rails'
end
~~~

then install the Factory Girl

~~~console
bundle install
~~~

Factory Girl allows us to create Factories that define a typical test user so let's create a factory file for our first User factory. Create __spec/factories.rb__ then add these lines to the file:

~~~ruby
FactoryGirl.define do
  sequence :email do |n|
   "person#{n}@domain.com"
  end

  factory :user do
    email { generate(:email) } 
    password 'password'
  end
end
~~~

This factory will create users with a sequence of unique emails "person1@domain.com", "person2@domain.com", "person3@domain.com" etc..

Now let's use FactoryGirl in our test:

In `spec/controllers/dashboard_controller_spec.rb` replace the line:

~~~ruby
sign_in :user, User.create(:email => 'foo@domain.com', :password => 'simple')
~~~

with

~~~ruby
sign_in :user, FactoryGirl.create(:user)
~~~

now check that it's all still working

~~~console
bundle exec rake spec  
~~~

## Testing we can sign-in and see the Dashboard  
  
We've tested that we have to be signed-in to see the dashboard index page so now let's test that we CAN sign in. Create the folder and file spec/integration/dashboard/authentication_spec.rb and add these lines:

~~~ruby
require 'spec_helper'

describe 'only registered users can access dashboard' do

  it 'should require users to sign in when they trying to access dashboard' do
    user = FactoryGirl.create(:user)

    visit dashboard_index_url

    page.current_path.should == new_user_session_path

    # 'Email' and 'Password' are the text in the HTML labels on the sign in screen
    fill_in('Email', :with => user.email)
    fill_in('Password', :with => user.password)

    click_button('Sign in')

    page.current_path.should == dashboard_index_path
  end
 
end
~~~

We're using the Capybara gem to journey through our application as if we were browsing. The test:

1. creates a user.
1. tries the visit the dashboard index page.
1. confirms that we are actually on the sign-in page.
1. fills in the email and passowrd of the user Factory girl created for us.
1. clicks sign-in,
1. confirms that we are now on the dashboard index page.

~~~console
bundle exec rake spec
~~~

and it should pass.

## Testing we can sign-up and see the Dashboard 

Lastly, we want users that aren't logged-in and don't have an account with us to be able to sign-up and then see the dashboard index page. Add this to spec/integration/dashboard/authentication_spec.rb

~~~ruby
it 'should allow users without an account to sign-up then access the dashboard' do

  visit dashboard_index_url

  page.current_path.should == new_user_session_path

  click_link('Sign up')

  page.current_path.should == new_user_registration_path

  # 'Email' and 'Password' are the text in the HTML labels on the sign in screen
  fill_in('Email', :with => 'joe@bloggsxyz.com')
  fill_in('Password', :with => 'JoeBlogg1')
  fill_in('Password confirmation', :with => 'JoeBlogg1')

  click_button('Sign up')

  page.current_path.should == dashboard_index_path
end
~~~

This time the journey through our application is:

1. try to visit the dashboard index page.
1. confirm that we are actually on the sign-in page.
1. click the 'Sign up' link
1. confirm we're on the sign-up page which is the named route `new_user_registration_path`
1. fill in the email, password and password confirmation.
1. click 'Sign up',
1. confirm that we are now on the dashboard index page.

Each time we run this test we're creating a user with the same name and password. This brings us to a very important point about Rails testing. We already mentioned that Rails has development, testing and production environments. Each environment has its own database. Look at config/database.yml:

~~~ruby
test:
  adapter: sqlite3
  database: db/test.sqlite3
  pool: 5
  timeout: 5000
~~~

We can see that for testing we have a database called db/test.sqlite3 so that we don't do anything to mess up the data we've been using in development. Rails also runs each test inside a transaction that rolls back when each test is complete so we can run the test above a thousand times and it will never actually persisting the user we created to our test database. 


COMMENTS
 

	

